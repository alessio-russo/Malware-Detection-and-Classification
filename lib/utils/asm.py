import numpy as np
import pefile
from capstone import *

class ASM:
    def __init__(self, file_path: str):
        self._file_path = file_path
        self._pe = pefile.PE(self._file_path)
        # Assembly
        self.asm_commands_call = 0
        self.asm_commands_add = 0
        self.asm_commands_cdq = 0
        self.asm_commands_cld = 0
        self.asm_commands_cli = 0
        self.asm_commands_cmc = 0
        self.asm_commands_cmp = 0
        self.asm_commands_cwd = 0
        self.asm_commands_daa = 0
        self.asm_commands_dd = 0
        self.asm_commands_dec = 0
        self.asm_commands_dw = 0
        self.asm_commands_endp = 0
        self.asm_commands_faddp = 0
        self.asm_commands_fchs = 0
        self.asm_commands_fdiv = 0
        self.asm_commands_fdivr = 0
        self.asm_commands_fistp = 0
        self.asm_commands_fld = 0
        self.asm_commands_fstp = 0
        self.asm_commands_fword = 0
        self.asm_commands_fxch = 0
        self.asm_commands_imul = 0
        self.asm_commands_in = 0
        self.asm_commands_inc = 0
        self.asm_commands_ins = 0
        self.asm_commands_jb = 0
        self.asm_commands_je = 0
        self.asm_commands_jg = 0
        self.asm_commands_jl = 0
        self.asm_commands_jmp = 0
        self.asm_commands_jnb = 0
        self.asm_commands_jno = 0
        self.asm_commands_jo = 0
        self.asm_commands_jz = 0
        self.asm_commands_lea = 0
        self.asm_commands_mov = 0
        self.asm_commands_mul = 0
        self.asm_commands_not = 0
        self.asm_commands_or = 0
        self.asm_commands_out = 0
        self.asm_commands_outs = 0
        self.asm_commands_pop = 0
        self.asm_commands_push = 0
        self.asm_commands_rcl = 0
        self.asm_commands_rcr = 0
        self.asm_commands_rep = 0
        self.asm_commands_ret = 0
        self.asm_commands_rol = 0
        self.asm_commands_ror = 0
        self.asm_commands_sal = 0
        self.asm_commands_sar = 0
        self.asm_commands_sbb = 0
        self.asm_commands_scas = 0
        self.asm_commands_shl = 0
        self.asm_commands_shr = 0
        self.asm_commands_sidt = 0
        self.asm_commands_stc = 0
        self.asm_commands_std = 0
        self.asm_commands_sti = 0
        self.asm_commands_stos = 0
        self.asm_commands_sub = 0
        self.asm_commands_test = 0
        self.asm_commands_wait = 0
        self.asm_commands_xchg = 0
        self.asm_commands_xor = 0
        self.asm_line_count = 0

        self.asm = self._extract_assembly()
        self._extract_assembly_features()

    def _extract_assembly(self) -> str:
            code_offset = 0x0000  # L'offset di inizio del codice eseguibile
            code_size = 0x0000  # Lunghezza del segmento di codice

            # Trova la sezione che contiene il codice eseguibile (tipicamente '.text' o 'CODE')
            for section in self._pe.sections:
                if b'.text' in section.Name or b'CODE' in section.Name:
                    code_offset = section.PointerToRawData
                    code_size = section.SizeOfRawData
                    break

            # Leggi il file eseguibile
            with open(self._file_path, "rb") as f:
                file_content = f.read()

            # Crea un'istanza di Capstone per disassemblare il codice x86
            md = Cs(CS_ARCH_X86, CS_MODE_64)

            # Disassemblo il codice
            asm = ""
            for i in md.disasm(file_content[code_offset:code_offset + code_size], 0x1000):
                asm += f"{i.mnemonic} {i.op_str}\n"
            return asm.lower()

    def _extract_assembly_features(self):
        asm = self.asm.split("\n")
        self.asm_line_count = len(asm)

        for line in asm:
            line = line.split()
            if len(line) != 0:
                if "add" in line:
                    self.asm_commands_add += 1
                elif "call" in line:
                    self.asm_commands_call += 1
                elif "cdq" in line:
                    self.asm_commands_cdq += 1
                elif "cld" in line:
                    self.asm_commands_cld += 1
                elif "cli" in line:
                    self.asm_commands_cli += 1
                elif "cmc" in line:
                    self.asm_commands_cmc += 1
                elif "cmp" in line:
                    self.asm_commands_cmp += 1
                elif "cwd" in line:
                    self.asm_commands_cwd += 1
                elif "daa" in line:
                    self.asm_commands_daa += 1
                elif "dd" in line:
                    self.asm_commands_dd += 1
                elif "dec" in line:
                    self.asm_commands_dec += 1
                elif "dw" in line:
                    self.asm_commands_dw += 1
                elif "endp" in line:
                    self.asm_commands_endp += 1
                elif "faddp" in line:
                    self.asm_commands_faddp += 1
                elif "fchs" in line:
                    self.asm_commands_fchs += 1
                elif "fdiv" in line:
                    self.asm_commands_fdiv += 1
                elif "fdivr" in line:
                    self.asm_commands_fdivr += 1
                elif "fistp" in line:
                    self.asm_commands_fistp += 1
                elif "fld" in line:
                    self.asm_commands_fld += 1
                elif "fstp" in line:
                    self.asm_commands_fstp += 1
                elif "fword" in line:
                    self.asm_commands_fword += 1
                elif "fxch" in line:
                    self.asm_commands_fxch += 1
                elif "imul" in line:
                    self.asm_commands_imul += 1
                elif "in" in line:
                    self.asm_commands_in += 1
                elif "inc" in line:
                    self.asm_commands_inc += 1
                elif "ins" in line:
                    self.asm_commands_ins += 1
                elif "jb" in line:
                    self.asm_commands_jb += 1
                elif "je" in line:
                    self.asm_commands_je += 1
                elif "jg" in line:
                    self.asm_commands_jg += 1
                elif "jl" in line:
                    self.asm_commands_jl += 1
                elif "jmp" in line:
                    self.asm_commands_jmp += 1
                elif "jnb" in line:
                    self.asm_commands_jnb += 1
                elif "jno" in line:
                    self.asm_commands_jno += 1
                elif "jo" in line:
                    self.asm_commands_jo += 1
                elif "jz" in line:
                    self.asm_commands_jz += 1
                elif "lea" in line:
                    self.asm_commands_lea += 1
                elif "mov" in line:
                    self.asm_commands_mov += 1
                elif "mul" in line:
                    self.asm_commands_mul += 1
                elif "not" in line:
                    self.asm_commands_not += 1
                elif "or" in line:
                    self.asm_commands_or += 1
                elif "out" in line:
                    self.asm_commands_out += 1
                elif "outs" in line:
                    self.asm_commands_outs += 1
                elif "pop" in line:
                    self.asm_commands_pop += 1
                elif "push" in line:
                    self.asm_commands_push += 1
                elif "rcl" in line:
                    self.asm_commands_rcl += 1
                elif "rcr" in line:
                    self.asm_commands_rcr += 1
                elif "rep" in line:
                    self.asm_commands_rep += 1
                elif "ret" in line:
                    self.asm_commands_ret += 1
                elif "rol" in line:
                    self.asm_commands_rol += 1
                elif "ror" in line:
                    self.asm_commands_ror += 1
                elif "sal" in line:
                    self.asm_commands_sal += 1
                elif "sar" in line:
                    self.asm_commands_sar += 1
                elif "sbb" in line:
                    self.asm_commands_sbb += 1
                elif "scas" in line:
                    self.asm_commands_scas += 1
                elif "shl" in line:
                    self.asm_commands_shl += 1
                elif "shr" in line:
                    self.asm_commands_shr += 1
                elif "sidt" in line:
                    self.asm_commands_sidt += 1
                elif "stc" in line:
                    self.asm_commands_stc += 1
                elif "std" in line:
                    self.asm_commands_std += 1
                elif "sti" in line:
                    self.asm_commands_sti += 1
                elif "stos" in line:
                    self.asm_commands_stos += 1
                elif "sub" in line:
                    self.asm_commands_sub += 1
                elif "test" in line:
                    self.asm_commands_test += 1
                elif "wait" in line:
                    self.asm_commands_wait += 1
                elif "xchg" in line:
                    self.asm_commands_xchg += 1
                elif "xor" in line:
                    self.asm_commands_xor += 1

    @property
    def assembly_features(self) -> np.ndarray:
        return np.array([
            self.asm_commands_call, self.asm_commands_add, self.asm_commands_cdq, self.asm_commands_cld,
            self.asm_commands_cli, self.asm_commands_cmc, self.asm_commands_cmp, self.asm_commands_cwd,
            self.asm_commands_daa, self.asm_commands_dd, self.asm_commands_dec, self.asm_commands_dw,
            self.asm_commands_endp, self.asm_commands_faddp, self.asm_commands_fchs, self.asm_commands_fdiv,
            self.asm_commands_fdivr, self.asm_commands_fistp, self.asm_commands_fld, self.asm_commands_fstp,
            self.asm_commands_fword, self.asm_commands_fxch, self.asm_commands_imul, self.asm_commands_in,
            self.asm_commands_inc, self.asm_commands_ins, self.asm_commands_jb, self.asm_commands_je,
            self.asm_commands_jg, self.asm_commands_jl, self.asm_commands_jmp, self.asm_commands_jnb,
            self.asm_commands_jno, self.asm_commands_jo, self.asm_commands_jz, self.asm_commands_lea,
            self.asm_commands_mov, self.asm_commands_mul, self.asm_commands_not, self.asm_commands_or,
            self.asm_commands_out, self.asm_commands_outs, self.asm_commands_pop, self.asm_commands_push,
            self.asm_commands_rcl, self.asm_commands_rcr, self.asm_commands_rep, self.asm_commands_ret,
            self.asm_commands_rol, self.asm_commands_ror, self.asm_commands_sal, self.asm_commands_sar,
            self.asm_commands_sbb, self.asm_commands_scas, self.asm_commands_shl, self.asm_commands_shr,
            self.asm_commands_sidt, self.asm_commands_stc, self.asm_commands_std, self.asm_commands_sti,
            self.asm_commands_stos, self.asm_commands_sub, self.asm_commands_test, self.asm_commands_wait,
            self.asm_commands_xchg, self.asm_commands_xor, self.asm_line_count
        ], dtype=np.int32)
