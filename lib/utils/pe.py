import numpy as np
import pefile
import re


# pip install --pre --no-binary capstone capstone - mac m1
# pip install capstone-windows - windows

class PE:
    # https://learn.microsoft.com/it-it/windows/win32/debug/pe-format
    def __init__(self, file_path: str):
        self._file_path = file_path
        self._pe = pefile.PE(self._file_path)
        # DOS HEADER
        self.e_magic = 0
        self.e_cblp = 0
        self.e_cp = 0
        self.e_crlc = 0
        self.e_cparhdr = 0
        self.e_minalloc = 0
        self.e_maxalloc = 0
        self.e_ss = 0
        self.e_sp = 0
        self.e_csum = 0
        self.e_ip = 0
        self.e_cs = 0
        self.e_lfarlc = 0
        self.e_ovno = 0
        self.e_oemid = 0
        self.e_oeminfo = 0
        self.e_lfanew = 0

        # FILE HEADER
        self.machine = 0
        self.number_of_sections = 0
        self.creation_year = 0
        self.pointer_to_symbol_table = 0
        self.number_of_symbols = 0
        self.size_of_optional_header = 0
        self.characteristics = 0

        # OPTIONAL HEADER

        self.magic = 0
        self.major_linker_version = 0
        self.minor_linker_version = 0
        self.size_of_code = 0
        self.size_of_initialized_data = 0
        self.size_of_uninitialized_data = 0
        self.address_of_entry_point = 0
        self.base_of_code = 0
        self.image_base = 0
        self.section_alignment = 0
        self.file_alignment = 0
        self.major_operating_system_version = 0
        self.minor_operating_system_version = 0
        self.major_image_version = 0
        self.minor_image_version = 0
        self.major_subsystem_version = 0
        self.minor_subsystem_version = 0
        self.size_of_image = 0
        self.size_of_headers = 0
        self.checksum = 0
        self.subsystem = 0
        self.dll_characteristics = 0
        self.size_of_stack_reserve = 0
        self.size_of_stack_commit = 0
        self.size_of_heap_reserve = 0
        self.size_of_heap_commit = 0
        self.loader_flags = 0
        self.number_of_rva_and_sizes = 0

        self._extract_header_features()

    def _extract_header_features(self):
        dos_header = self._pe.DOS_HEADER.dump_dict()
        file_header = self._pe.FILE_HEADER.dump_dict()
        optional_header = self._pe.OPTIONAL_HEADER.dump_dict()

        # DOS HEADER
        self.e_magic = dos_header['e_magic']['Value']
        self.e_cblp = dos_header['e_cblp']['Value']
        self.e_cp = dos_header['e_cp']['Value']
        self.e_crlc = dos_header['e_crlc']['Value']
        self.e_cparhdr = dos_header['e_cparhdr']['Value']
        self.e_minalloc = dos_header['e_minalloc']['Value']
        self.e_maxalloc = dos_header['e_maxalloc']['Value']
        self.e_ss = dos_header['e_ss']['Value']
        self.e_sp = dos_header['e_sp']['Value']
        self.e_csum = dos_header['e_csum']['Value']
        self.e_ip = dos_header['e_ip']['Value']
        self.e_cs = dos_header['e_cs']['Value']
        self.e_lfarlc = dos_header['e_lfarlc']['Value']
        self.e_ovno = dos_header['e_ovno']['Value']
        self.e_oemid = dos_header['e_ovno']['Value']
        self.e_oeminfo = dos_header['e_oeminfo']['Value']
        self.e_lfanew = dos_header['e_lfanew']['Value']

        # FILE HEADER
        self.machine = file_header['Machine']['Value']
        self.number_of_sections = file_header['NumberOfSections']['Value']
        time_date_stamp = file_header['TimeDateStamp']['Value']
        self.creation_year = re.search(" [0-9]{4} ", time_date_stamp)
        self.creation_year = self.creation_year.group().strip()
        self.pointer_to_symbol_table = file_header['PointerToSymbolTable']['Value']
        self.number_of_symbols = file_header['NumberOfSymbols']['Value']
        self.size_of_optional_header = file_header['SizeOfOptionalHeader']['Value']
        self.characteristics = file_header['Characteristics']['Value']

        # OPTIONAL HEADER

        self.magic = optional_header['Magic']['Value']
        self.major_linker_version = optional_header['MajorLinkerVersion']['Value']
        self.minor_linker_version = optional_header['MinorLinkerVersion']['Value']
        self.size_of_code = optional_header['SizeOfCode']['Value']
        self.size_of_initialized_data = optional_header['SizeOfInitializedData']['Value']
        self.size_of_uninitialized_data = optional_header['SizeOfUninitializedData']['Value']
        self.address_of_entry_point = optional_header['AddressOfEntryPoint']['Value']
        self.base_of_code = optional_header['BaseOfCode']['Value']
        self.image_base = optional_header['ImageBase']['Value']
        self.section_alignment = optional_header['SectionAlignment']['Value']
        self.file_alignment = optional_header['FileAlignment']['Value']
        self.major_operating_system_version = optional_header['MajorOperatingSystemVersion']['Value']
        self.minor_operating_system_version = optional_header['MinorOperatingSystemVersion']['Value']
        self.major_image_version = optional_header['MajorImageVersion']['Value']
        self.minor_image_version = optional_header['MinorImageVersion']['Value']
        self.major_subsystem_version = optional_header['MajorSubsystemVersion']['Value']
        self.minor_subsystem_version = optional_header['MinorSubsystemVersion']['Value']
        self.size_of_image = optional_header['SizeOfImage']['Value']
        self.size_of_headers = optional_header['SizeOfHeaders']['Value']
        self.checksum = optional_header['CheckSum']['Value']
        self.subsystem = optional_header['Subsystem']['Value']
        self.dll_characteristics = optional_header['DllCharacteristics']['Value']
        self.size_of_stack_reserve = optional_header['SizeOfStackReserve']['Value']
        self.size_of_stack_commit = optional_header['SizeOfStackCommit']['Value']
        self.size_of_heap_reserve = optional_header['SizeOfHeapReserve']['Value']
        self.size_of_heap_commit = optional_header['SizeOfHeapCommit']['Value']
        self.loader_flags = optional_header['LoaderFlags']['Value']
        self.number_of_rva_and_sizes = optional_header['NumberOfRvaAndSizes']['Value']


    @property
    def header_features(self) -> np.ndarray:
        return np.array([
            self.e_magic, self.e_cblp, self.e_cp, self.e_crlc, self.e_cparhdr,
            self.e_minalloc, self.e_maxalloc, self.e_ss, self.e_sp, self.e_csum,
            self.e_ip, self.e_cs, self.e_lfarlc, self.e_ovno, self.e_oemid,
            self.e_oeminfo, self.e_lfanew, self.machine,
            self.number_of_sections, self.creation_year, self.pointer_to_symbol_table,
            self.number_of_symbols, self.size_of_optional_header, self.characteristics,
            self.magic, self.major_linker_version, self.minor_linker_version,
            self.size_of_code, self.size_of_initialized_data, self.size_of_uninitialized_data,
            self.address_of_entry_point, self.base_of_code,
            self.image_base, self.section_alignment, self.file_alignment,
            self.major_operating_system_version, self.minor_operating_system_version,
            self.major_image_version, self.minor_image_version,
            self.major_subsystem_version, self.minor_subsystem_version,
            self.size_of_image, self.size_of_headers, self.checksum,
            self.subsystem, self.dll_characteristics, self.size_of_stack_reserve,
            self.size_of_stack_commit, self.size_of_heap_reserve,
            self.size_of_heap_commit, self.loader_flags,
            self.number_of_rva_and_sizes
        ], dtype=np.int32)