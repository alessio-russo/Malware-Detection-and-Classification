import torch.nn as nn


class MultiClassMLP(nn.Module):
    def __init__(self):
        super(MultiClassMLP, self).__init__()

        self._input__h_1 = nn.Linear(66,32)  # Input layer to first hidden layer - Linear layer of fully condensed layer
        self._h_1__h_2 = nn.Linear(32, 16)  # First hidden layer to second hidden layer
        self._h_2__output = nn.Linear(16, 9)  # Second hidden layer to output layer
        self.relu = nn.ReLU()  # activation function

    def forward(self, x):
        x = self.relu(self._input__h_1(x))
        x = self.relu(self._h_1__h_2(x))
        x = self._h_2__output(x)
        return x